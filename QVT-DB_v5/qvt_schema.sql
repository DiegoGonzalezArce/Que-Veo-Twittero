-- MySQL Script generated by MySQL Workbench
-- Tue May  9 23:19:13 2017
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='TRADITIONAL,ALLOW_INVALID_DATES';

-- -----------------------------------------------------
-- Schema qvt-db
-- -----------------------------------------------------
DROP SCHEMA IF EXISTS `qvt-db` ;

-- -----------------------------------------------------
-- Schema qvt-db
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `qvt-db` DEFAULT CHARACTER SET utf8 ;
USE `qvt-db` ;

-- -----------------------------------------------------
-- Table `qvt-db`.`Tweet_Keyword`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Tweet_Keyword`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `Tweet_Keyword` (
  `idTweet_Keyword` int(11) NOT NULL AUTO_INCREMENT,
  `Tweet_id` bigint(30) NOT NULL,
  `Keyword2_id` int(11) NOT NULL,
  PRIMARY KEY (`idTweet_Keyword`),
  KEY `fk_Tweet1_idx` (`Tweet_id`),
  KEY `fk_Keyword2_idx` (`Keyword2_id`),
  CONSTRAINT `fk_Keyword2` FOREIGN KEY (`Keyword2_id`) REFERENCES `Keyword` (`id_keyword`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `fk_Tweet1` FOREIGN KEY (`Tweet_id`) REFERENCES `Tweet` (`id_Tweet`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- -----------------------------------------------------
-- Table `qvt-db`.`Tweet`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `qvt-db`.`Tweet`;

CREATE TABLE IF NOT EXISTS `qvt-db`.`Tweet` (
  `id_Tweet` BIGINT(30) NOT NULL,
  `comment` VARCHAR(250) NOT NULL,
  `username` VARCHAR(45) NOT NULL,
  `date` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  `menciones` INT(11) NOT NULL,
  `analisis` INT(11) NOT NULL,
  PRIMARY KEY (`id_Tweet`))
ENGINE=InnoDB DEFAULT CHARSET=utf8;


-- -----------------------------------------------------
-- Table `qvt-db`.`Canal`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `qvt-db`.`Canal` ;

CREATE TABLE IF NOT EXISTS `qvt-db`.`Canal` (
  `id_canal` INT NOT NULL AUTO_INCREMENT,
  `nombre` VARCHAR(45) NOT NULL,
  `descripcion` TEXT NULL,
  PRIMARY KEY (`id_canal`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `qvt-db`.`Usuario`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `qvt-db`.`Usuario` ;

CREATE TABLE IF NOT EXISTS `qvt-db`.`Usuario` (
  `id_usuario` INT NOT NULL AUTO_INCREMENT,
  `username` VARCHAR(45) NOT NULL,
  `password` VARCHAR(45) NOT NULL,
  `nombres` VARCHAR(45) NULL,
  `apellidos` VARCHAR(45) NULL,
  `email` VARCHAR(45) NULL,
  PRIMARY KEY (`id_usuario`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `qvt-db`.`Programa`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `qvt-db`.`Programa` ;

CREATE TABLE IF NOT EXISTS `qvt-db`.`Programa` (
  `id_programa` INT NOT NULL AUTO_INCREMENT,
  `canal_id` INT NOT NULL,
  `usuario_id` INT NOT NULL,
  `nombre` VARCHAR(45) NOT NULL,
  `descripcion` TEXT NULL,
  `inicio` TIME NOT NULL,
  `termino` TIME NOT NULL,
  `menciones` INT NOT NULL DEFAULT 0,
  `mencionesPositivas` INT NOT NULL DEFAULT 0,
  `mencionesNegativas` INT NOT NULL DEFAULT 0,
  PRIMARY KEY (`id_programa`),
  CONSTRAINT `fk_canal`
    FOREIGN KEY (`canal_id`)
    REFERENCES `qvt-db`.`Canal` (`id_canal`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_usuario`
    FOREIGN KEY (`usuario_id`)
    REFERENCES `qvt-db`.`Usuario` (`id_usuario`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

CREATE INDEX `fk_canal_idx` ON `qvt-db`.`Programa` (`canal_id` ASC);

CREATE INDEX `fk_usuario_idx` ON `qvt-db`.`Programa` (`usuario_id` ASC);


-- -----------------------------------------------------
-- Table `qvt-db`.`Keyword`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `qvt-db`.`Keyword` ;

CREATE TABLE IF NOT EXISTS `qvt-db`.`Keyword` (
  `id_keyword` INT NOT NULL AUTO_INCREMENT,
  `keyword` VARCHAR(45) NOT NULL,
  `descripcion` TEXT NULL,
  PRIMARY KEY (`id_keyword`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `qvt-db`.`Categoria`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `qvt-db`.`Categoria` ;

CREATE TABLE IF NOT EXISTS `qvt-db`.`Categoria` (
  `id_categoria` INT NOT NULL AUTO_INCREMENT,
  `nombre` VARCHAR(45) NOT NULL,
  `descripcion` TEXT NULL,
  PRIMARY KEY (`id_categoria`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `qvt-db`.`Programa_Keyword`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `qvt-db`.`Programa_Keyword` ;

CREATE TABLE IF NOT EXISTS `qvt-db`.`Programa_Keyword` (
  `id_programa_keyword` INT NOT NULL AUTO_INCREMENT,
  `programa_id` INT NOT NULL,
  `keyword_id` INT NOT NULL,
  PRIMARY KEY (`id_programa_keyword`),
  CONSTRAINT `fk_programa2`
    FOREIGN KEY (`programa_id`)
    REFERENCES `qvt-db`.`Programa` (`id_programa`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_keyword`
    FOREIGN KEY (`keyword_id`)
    REFERENCES `qvt-db`.`Keyword` (`id_keyword`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

CREATE INDEX `fk_programa2_idx` ON `qvt-db`.`Programa_Keyword` (`programa_id` ASC);

CREATE INDEX `fk_keyword_idx` ON `qvt-db`.`Programa_Keyword` (`keyword_id` ASC);


-- -----------------------------------------------------
-- Table `qvt-db`.`Programa_Categoria`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `qvt-db`.`Programa_Categoria` ;

CREATE TABLE IF NOT EXISTS `qvt-db`.`Programa_Categoria` (
  `id_programa_categoria` INT NOT NULL AUTO_INCREMENT,
  `programa_id` INT NOT NULL,
  `categoria_id` INT NOT NULL,
  PRIMARY KEY (`id_programa_categoria`),
  CONSTRAINT `fk_programa1`
    FOREIGN KEY (`programa_id`)
    REFERENCES `qvt-db`.`Programa` (`id_programa`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_categoria`
    FOREIGN KEY (`categoria_id`)
    REFERENCES `qvt-db`.`Categoria` (`id_categoria`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

CREATE INDEX `fk_programa1_idx` ON `qvt-db`.`Programa_Categoria` (`programa_id` ASC);

CREATE INDEX `fk_categoria_idx` ON `qvt-db`.`Programa_Categoria` (`categoria_id` ASC);


SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;


-- Inserci√≥n de Procedimientos Almacenados --
DROP procedure IF EXISTS `mencionesCategorias`;
DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `mencionesCategorias`()
BEGIN
  SELECT C.nombre AS 'Categoria', SUM(P.menciones) AS 'Total de menciones'
  FROM programa AS P
  INNER JOIN programa_categoria AS P_C
  ON P.id_programa = P_C.programa_id
  INNER JOIN categoria AS C
  ON C.id_categoria = P_C.categoria_id
  GROUP BY C.nombre;
END$$
DELIMITER ;

DROP procedure IF EXISTS `programasDeCategoria`;
DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `programasDeCategoria`(IN nombreCategoria VARCHAR(45))
BEGIN
  SELECT P.nombre AS 'Programas'
  FROM programa AS P
  INNER JOIN programa_categoria AS P_C
  ON P.id_programa = P_C.programa_id
  INNER JOIN categoria AS C
  ON C.id_categoria = P_C.categoria_id
    WHERE C.nombre = nombreCategoria;
END$$
DELIMITER ;
